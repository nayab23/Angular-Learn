// ************************
// CSS Custom Properties
// ************************
$var-prefix: aurora;

$light: 300;
$regular: 400;
$semi-bold: 600;
$bold: 700;
$extra-bold: 800;


@mixin set-fonts($weight: null, $size: null, $font-style: null, $font-color: null ) {
  @if ($weight != null) {
    font-weight: $weight;
  }
  @if ($size != null) {
    font-size: $size;
  }
  @if ($font-style != null){
    font-style: $font-style;
  }
  @if ($font-color != null) {
    color: $font-color;
  }
}

/**
 * Use this mixin to declare a set of CSS Custom Properties.
 * The variables in $css_variables will be properly prefixed.
 * The use of this mixin is encouraged to keep a good scalability.
 *
 * Usage:
 *
 * @include cssvars((
 *  base-font-size: 65.5%,
 *  font-family: #{"HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif},
 *
 *  primary-color: #33b5e5,
 *  secondary-color: #ff500a,
 * ));
 *
 * Will result in
 *
 * root {
 *    --prefix-var-name: value;
 *    --prefix-var-name: value;
 *    --prefix-var-name: value;
 * }
 *
 */
@mixin cssvars($css_variables, $prefix: $var-prefix) {
  @each $name, $value in $css_variables {
      --#{$prefix}-#{$name}: #{$value};
  }
}

/**
 * Retrieve a css variable value with prefix
 *
 * Usage
 *
 * .selector {
 *   color: cssvar(primary-color);
 * }
 *
 * Will result in
 *
 * .selector {
 *    color: var(--prefix-primary-color);
 * }
 */
@function cssvar($name, $prefix: $var-prefix) {
  @return var(--#{$prefix}-#{$name});
}

/**
 * Update the value of a variable for a particular context.
 *
 * Usage
 * .selector {
 *   font-size: cssvar(button-font-size);
 *   &--big {
 *     @include cssvar(button-font-size, 2em);
 *   }
 * }
 */
@mixin cssvar ($name, $value: '', $prefix: $var-prefix) {
  --#{$prefix}-#{$name}: #{$value};
}

@function make-palette($name, $base-color, $contrast) {
  $light: lighten($base-color, 20%);
  $dark: darken($base-color, 10%);

  @return (
    #{$name}-color: $base-color,
    #{$name}-light-color: $light,
    #{$name}-dark-color: $dark,
    #{$name}-disabled-color: disable($base-color),
    #{$name}-light-disabled-color: disable($light),
    #{$name}-dark-disabled-color: disable($dark),
    #{$name}-contrast-color: $contrast,
  );
}

@function make-palette-colors($theme) {
  @return map-merge(
    map-merge(
      map-merge(
        make-palette(primary, map-get($theme, primary), map-get($theme, primary-contrast)),
        make-palette(action, map-get($theme, action), map-get($theme, action-contrast))
      )
      map-merge(
        make-palette(accent, map-get($theme, accent), map-get($theme, accent-contrast)),
        make-palette(alert, map-get($theme, alert), map-get($theme, alert-contrast))
      )
    ),
    make-palette(accept, map-get($theme, accept), map-get($theme, accept-contrast))
  );
};

// ************************
// Colors
// ************************

@function disable($color) {
  $color: desaturate($color, 30%);
  @if lightness($color) < 75 {
    @return lighten($color, 25%);
  } @else {
    @return darken($color, 10%);
  }
}
